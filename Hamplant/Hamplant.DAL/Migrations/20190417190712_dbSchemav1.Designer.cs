// <auto-generated />
using System;
using Hamplant.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Hamplant.DAL.Migrations
{
    [DbContext(typeof(HamplantContext))]
    [Migration("20190417190712_dbSchemav1")]
    partial class dbSchemav1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Hamplant.DAL.Model.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("LastWriteTime");

                    b.Property<string>("Name");

                    b.Property<Guid>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Bucket");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.MeasurementValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Percentage");

                    b.Property<double?>("Quantity");

                    b.Property<double?>("Weight");

                    b.HasKey("Id");

                    b.ToTable("MeasurementValue");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTimeOffset>("ExpirationDate");

                    b.Property<DateTimeOffset>("LastWriteTime");

                    b.Property<string>("Name");

                    b.Property<Guid>("NumberOfProductId");

                    b.Property<Guid>("SupplyId");

                    b.Property<int>("SupplyStatus");

                    b.HasKey("Id");

                    b.HasIndex("NumberOfProductId")
                        .IsUnique();

                    b.HasIndex("SupplyId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.Supply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BucketId");

                    b.Property<int>("DaysToExpiration");

                    b.Property<DateTimeOffset>("LastWriteTime");

                    b.Property<Guid>("NumberOfSuppliesId");

                    b.Property<int>("SupplyStatus");

                    b.Property<Guid>("SupplyTypeId");

                    b.Property<bool>("isRequired");

                    b.HasKey("Id");

                    b.HasIndex("BucketId");

                    b.HasIndex("NumberOfSuppliesId")
                        .IsUnique();

                    b.HasIndex("SupplyTypeId");

                    b.ToTable("Supply");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.SupplyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SupplyCategory");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.SupplyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SupplyType");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.SupplyTypeDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Order");

                    b.Property<Guid>("SupplyCategoryId");

                    b.Property<Guid>("SupplyTypeId");

                    b.HasKey("Id");

                    b.HasIndex("SupplyCategoryId");

                    b.HasIndex("SupplyTypeId");

                    b.ToTable("SupplyTypeDefinition");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("LastWriteTime");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.TeamMemeber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("TeamId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMemeber");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<string>("LastName");

                    b.Property<DateTimeOffset>("LastWriteTime");

                    b.Property<string>("Nickname");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Hamplant.DAL.Model.Bucket", b =>
                {
                    b.HasOne("Hamplant.DAL.Model.Team", "Team")
                        .WithMany("Buckets")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hamplant.DAL.Model.Product", b =>
                {
                    b.HasOne("Hamplant.DAL.Model.MeasurementValue", "NumberOfProduct")
                        .WithOne()
                        .HasForeignKey("Hamplant.DAL.Model.Product", "NumberOfProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hamplant.DAL.Model.Supply", "Supply")
                        .WithMany("Products")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hamplant.DAL.Model.Supply", b =>
                {
                    b.HasOne("Hamplant.DAL.Model.Bucket", "Bucket")
                        .WithMany("Supplies")
                        .HasForeignKey("BucketId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hamplant.DAL.Model.MeasurementValue", "NumberOfSupplies")
                        .WithOne()
                        .HasForeignKey("Hamplant.DAL.Model.Supply", "NumberOfSuppliesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hamplant.DAL.Model.SupplyType", "SupplyType")
                        .WithMany()
                        .HasForeignKey("SupplyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hamplant.DAL.Model.SupplyTypeDefinition", b =>
                {
                    b.HasOne("Hamplant.DAL.Model.SupplyCategory", "SupplyCategory")
                        .WithMany()
                        .HasForeignKey("SupplyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hamplant.DAL.Model.SupplyType", "SupplyType")
                        .WithMany()
                        .HasForeignKey("SupplyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hamplant.DAL.Model.TeamMemeber", b =>
                {
                    b.HasOne("Hamplant.DAL.Model.Team", "Team")
                        .WithMany("TeamMemebers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hamplant.DAL.Model.User", "User")
                        .WithMany("TeamMemebers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
